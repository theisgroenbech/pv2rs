free c: channel.
free c2: channel.
free s: channel[private].
free s2: channel[private].
type host. (* U, V *)
type pkey. (* E_U, E_V *)
type skey. (* skU, skV *)
type key. (* K_i *)
type nonce. (* N_U & N_V *)
type G. (* Commonly known g *)
type exponent. (* x & y *)
type pkID.(*  id(pkU) & id(pkV)  *)
type algorithmID.

(* Message Types *)
free T1: bitstring. free T4: bitstring.
free T2: bitstring. free T5: bitstring.
free T3: bitstring. free T6: bitstring.

(* AlgorithmIDs *)
free OSCORE: bitstring.
free EDHOC_PSK_Chaining: algorithmID.
free EDHOC: algorithmID.
free EDHOC_PRESHARED: algorithmID.

free empty: key.

(* Creating public keys *)
fun pk(skey): pkey.

(* Shared Key Encryption *)
fun aeadEncrypt(bitstring, key, bitstring): bitstring.
reduc forall x: bitstring, y: key, aad: bitstring; aeadDecrypt(aeadEncrypt(x, y, aad), y, aad) = x.
reduc forall x: bitstring, y: key, aad: bitstring; decrypt(aeadEncrypt(x, y, aad), y) = x.

(* Signing *)
fun sign(bitstring, skey): bitstring.
reduc forall x: bitstring, y: skey; verify(sign(x, y), pk(y)) = x.

(* Identifier function for the public keys *)
fun idI(pkey): pkID[private].
fun idR(pkey): pkID[private].

(* Key derivation functions *)
fun HKDF(G, bitstring, key, algorithmID): key.
reduc forall x: G, aad: bitstring, y: key, algID: algorithmID; getAlgorithm(HKDF(x,aad,y,algID)) = algID.

(* Hash function *)
fun hash(bitstring): bitstring.

(* Diffie Hellman *)
const g: G.
fun exp(G, exponent): G.
equation forall x: exponent, y: exponent; exp(exp(g, x), y) = exp(exp(g, y), x).

(* Authentication events Symmetric *)
event startInitiatorS(host, host, G, bitstring, bitstring).
event startResponderS(host, host, G, bitstring).
event midInitiatorS(host, host, G, bitstring).
event endInitiatorS(host, host, G, bitstring).
event endResponderS(host, host, G, bitstring, bitstring).

(* Authentication events Asymmetric *)
event startInitiatorA(host, host, G, bitstring, bitstring).
event startResponderA(host, host, G, bitstring).
event midInitiatorA(host, host, G, bitstring).
event endInitiatorA(host, host, G, bitstring).
event endResponderA(host, host, G, bitstring, bitstring).


(* Injective agreement Symmetric *)
query U: host, U': host, V: host, E_V: G, A_2: bitstring; inj-event (midInitiatorS(U, V, E_V, A_2)) ==> inj-event (startResponderS(U', V, E_V, A_2)).
query U: host, U': host, V: host, E_V: G, A_2: bitstring; inj-event (endInitiatorS(U, V, E_V, A_2)) ==> inj-event (startResponderS(U', V, E_V, A_2)).
query U: host, V: host, E_U: G, A_1: bitstring, A_3: bitstring; inj-event (endResponderS(U, V, E_U, A_1, A_3)) ==> inj-event (startInitiatorS(U, V, E_U, A_1, A_3)).

(* Injective agreement Asymmetric *)
query U: host, U': host, V: host, E_V: G, A_2: bitstring; inj-event (midInitiatorA(U, V, E_V, A_2)) ==> inj-event (startResponderA(U', V, E_V, A_2)).
query U: host, U': host, V: host, E_V: G, A_2: bitstring; inj-event (endInitiatorA(U, V, E_V, A_2)) ==> inj-event (startResponderA(U', V, E_V, A_2)).
query U: host, V: host, E_U: G, A_1: bitstring, A_3: bitstring; inj-event (endResponderA(U, V, E_U, A_1, A_3)) ==> inj-event (startInitiatorA(U, V, E_U, A_1, A_3)).

(* Privacy *)
query attacker (idI(pk(new skU))) phase 0.
query attacker (idR(pk(new skU))) phase 0.

(* Secrecy Symmetric *)
query attacker (new APP_2S) phase 0.
query attacker (new APP_3S) phase 0.

(* Secrecy Asymmetric *)
query attacker (new APP_2A) phase 0.
query attacker (new APP_3A) phase 0.

(* APP_2A, At completion *)
query attacker (new APP_2A') phase 1.
query attacker (new APP_2A') phase 0.

(* APP_2S, At completion *)
query attacker (new APP_2S') phase 1.
query attacker (new APP_2S') phase 0.

(* Foward Secrecy Symmetric *)
query attacker (new APP_2S) phase 1.
query attacker (new APP_3S) phase 1.

(* Forward Secrecy Asymmetric *)
query attacker (new APP_2A) phase 1.
query attacker (new APP_3A) phase 1.

(* Privacy *)
query attacker (idI(pk(new skU))) phase 1.
query attacker (idR(pk(new skU))) phase 1.

(* Termination Symmetric *)
query U: host, V: host, E_V: G, A_2: bitstring; event (endInitiatorS(U, V, E_V, A_2)).
query U: host, V: host, E_U: G, A_1: bitstring, A_3: bitstring; event (endResponderS(U, V, E_U, A_1, A_3)).

(* Termination Asymmetric *)
query U: host, V: host, E_V: G, A_2: bitstring; event (endInitiatorA(U, V, E_V, A_2)).
query U: host, V: host, E_U: G, A_1: bitstring, A_3: bitstring; event (endResponderA(U, V, E_U, A_1, A_3)).

let initiatorAsym(U: host, V: host, skU: skey, pkU: pkey, pkV: pkey) =
  new x: exponent; let E_U = exp(g, x) in new S_U: bitstring;
  new N_U: nonce; new APP_1A: bitstring; new APP_3A: bitstring;
  event startInitiatorA(U, V, E_U, APP_1A, APP_3A);
  let msg_1: bitstring = (T1, S_U, N_U, E_U, APP_1A) in
  out(c, msg_1); in(c, msg_2: bitstring);
  let (data_2: bitstring, COSE_ENC_2: bitstring) = msg_2 in
  let (=T2, =S_U, xS_V: bitstring, N_V: nonce, xE_V: G) = data_2 in
  let aad_2: bitstring = hash((msg_1, data_2)) in
  let K: G = exp(xE_V, x) in
  let K_2: key = HKDF(K, aad_2, empty, EDHOC) in
  let signature_2: bitstring = aeadDecrypt(COSE_ENC_2, K_2, aad_2) in
  let (=idR(pkV), =aad_2, APP_2A: bitstring) = verify(signature_2, pkV) in
  event midInitiatorA(U, V, xE_V, APP_2A);
  let data_3: bitstring = (T3, xS_V) in
  let aad_3: bitstring = hash((hash((msg_1, msg_2)), data_3)) in
  let signature_3: bitstring = sign((idI(pk(skU)), aad_3, APP_3A), skU) in
  let K_3: key = HKDF(K, aad_3, empty, EDHOC) in
  let COSE_ENC_3: bitstring = aeadEncrypt(signature_3, K_3, aad_3) in
  let msg_3: bitstring = (data_3, COSE_ENC_3) in
  out(c, msg_3);
  event endInitiatorA(U, V, xE_V, APP_2A).

let responderAsym(V: host, U: host, skV: skey, pkV: pkey, pkU: pkey) =
  new y: exponent; let E_V: G = exp(g, y) in new S_V: bitstring;
  new N_V: nonce; new APP_2A: bitstring; new APP_2A': bitstring;
  event startResponderA(U, V, E_V, APP_2A);
  in(c, msg_1: bitstring);
  let (=T1, xS_U: bitstring, xN_U: nonce, xE_U: G, APP_1A: bitstring) = msg_1 in
  let data_2: bitstring = (T2, xS_U, S_V, N_V, E_V) in
  let aad_2: bitstring = hash((msg_1, data_2)) in
  let signature_2: bitstring = sign((idR(pk(skV)), aad_2, APP_2A), skV) in
  let K: G = exp(xE_U, y) in
  let K_2: key = HKDF(K, aad_2, empty, EDHOC) in
  let COSE_ENC_2: bitstring = aeadEncrypt(signature_2, K_2, aad_2) in
  let msg_2: bitstring = (data_2, COSE_ENC_2) in
  out(c, msg_2); in(c, msg_3: bitstring);
  let (data_3: bitstring, COSE_ENC_3: bitstring) = msg_3 in
  let (=T3, =S_V) = data_3 in
  let aad_3: bitstring = hash((hash((msg_1, msg_2)), data_3)) in
  let K_3: key = HKDF(K, aad_3, empty, EDHOC) in
  let signature_3: bitstring = aeadDecrypt(COSE_ENC_3, K_3, aad_3) in
  let (=idI(pkU), =aad_3, APP_3A: bitstring) = verify(signature_3, pkU) in
  event endResponderA(U, V, xE_U, APP_1A, APP_3A);
  let signature_2': bitstring = sign((idR(pkV), aad_2, APP_2A'), skV) in
  let COSE_ENC_2': bitstring = aeadEncrypt(signature_2', K_2, aad_2) in
  let msg_2': bitstring = (data_2, COSE_ENC_2') in
  out(c2, msg_2');
  let PSK' = HKDF(K, hash(msg_3), empty, EDHOC_PSK_Chaining) in
  out(s2, (U, V, PSK')).

let initiatorSym(U: host, V: host, PSK: key) =
  new x: exponent; let E_U: G = exp(g, x) in new S_U: bitstring;
  new N_U: nonce; new APP_1S: bitstring; new APP_3S: bitstring;
  event startInitiatorS(U, V, E_U, APP_1S, APP_3S);
  let msg_1: bitstring = (T4, S_U, N_U, E_U, APP_1S) in
  out(c, msg_1); in(c, msg_2: bitstring);
  let (data_2: bitstring, COSE_ENC_2: bitstring) = msg_2 in
  let (=T5, =S_U, xS_V: bitstring, xN_V: nonce, xE_V: G) = data_2 in
  let aad_2: bitstring = hash((msg_1, data_2)) in
  let K: G = exp(xE_V, x) in
  let K_2: key = HKDF(K, aad_2, PSK, EDHOC) in
  let (APP_2S: bitstring) = aeadDecrypt(COSE_ENC_2, K_2, aad_2) in
  event midInitiatorS(U, V, xE_V, APP_2S);
  let data_3: bitstring = (T6, xS_V) in
  let aad_3: bitstring = hash((hash((msg_1, msg_2)), data_3)) in
  let K_3: key = HKDF(K, aad_3, PSK, EDHOC) in
  let msg_3: bitstring = (data_3, aeadEncrypt(APP_3S, K_3, aad_3)) in
  out(c, msg_3);
  event endInitiatorS(U, V, xE_V, APP_2S).

let responderSym(V: host, U: host, PSK: key) =
  new y: exponent; let E_V: G = exp(g, y) in new S_V: bitstring;
  new N_V: nonce; new APP_2S: bitstring; new APP_2S': bitstring;
  event startResponderS(U, V, E_V, APP_2S);
  in(c, msg_1: bitstring);
  let (=T4, xS_U: bitstring, N_U: nonce, xE_U: G, APP_1S: bitstring) = msg_1 in
  let data_2: bitstring = (T5, xS_U, S_V, N_V, E_V) in
  let aad_2: bitstring = hash((msg_1, data_2)) in
  let K: G = exp(xE_U, y) in
  let K_2: key = HKDF(K, aad_2, PSK, EDHOC) in
  let msg_2: bitstring = (data_2, aeadEncrypt(APP_2S, K_2, aad_2)) in
  out(c, msg_2); in(c, msg_3: bitstring);
  let (data_3: bitstring, COSE_ENC_3: bitstring) = msg_3 in
  let (=T6, =S_V) = data_3 in
  let aad_3: bitstring = hash((hash((msg_1, msg_2)), data_3)) in
  let K_3: key = HKDF(K, aad_3, PSK, EDHOC) in
  let (APP_3S: bitstring) = aeadDecrypt(COSE_ENC_3, K_3, aad_3) in
  event endResponderS(U, V, xE_U, APP_1S, APP_3S);
  let COSE_ENC_2': bitstring = aeadEncrypt(APP_2S', K_2, aad_2) in
  let msg_2': bitstring = (data_2, COSE_ENC_2') in
  out(c2, msg_2');
  if(getAlgorithm(PSK) = EDHOC_PRESHARED) then
  let PSK' = HKDF(K, hash(msg_3), PSK, EDHOC_PSK_Chaining) in
  out(s2, (U, V, PSK')).

process
  (!new U: host;
    new skU: skey;
    let pkU = pk(skU) in
    out(s, (U, skU, pkU)); out(s, (U, skU, pkU));
    out(c, (pkU)); phase 1; out(c, skU) ) |
  (!in(s, (U:host, skU:skey, pkU:pkey));
    in(s, (V:host, skV:skey, pkV:pkey));
    new random: bitstring;
    let PSK = HKDF(g, random, empty, EDHOC_PRESHARED) in
    out(s2, (U, V, PSK)); out(s2, (U, V, PSK)); phase 1; out(c, PSK) ) |
  (!in(s, (U:host, skU:skey, pkU:pkey));
    in(s, (V:host, skV:skey, pkV:pkey));
    (initiatorAsym(U, V, skU, pkU, pkV) |
     responderAsym(V, U, skV, pkV, pkU)) ) |
  (!in(s2, (U:host, V:host, PSK:key));
    (initiatorSym(U, V, PSK) |
     responderSym(V, U, PSK)) )
